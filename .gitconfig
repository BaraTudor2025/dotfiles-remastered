[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[user]
	name = "Bara C. Tudor"
	email = vector2025@gmail.com
[core]
	#editor = \"C:\\Users\\BaraTudor\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" --wait
	#editor = \"C:\\Users\\BaraTudor\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\\code\" --wait
	autocrlf = true
	#pager = less #cat
[alias]
    alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
	take-theirs = !sh -c 'git checkout --theirs $@ && git add $@'
	take-ours = !sh -c 'git checkout --ours $@ && git add $@'
	#take-theirs = !xargs -I {} git branch -f 'bk/{}'

	# display info
	s = status --show-stash
	st = s
	ls = status --short --branch
	last = log -1 HEAD --stat
	ls-hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
	ls-log = log --oneline
	ls-config = config --global --list
	who = shortlog -s --
	ls-lost = !git log --graph --oneline --decorate $(git fsck --no-reflog | awk '/dangling commit/ {print $3}')
	ls-local = branch --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) \t\t - [%(color:red)%(upstream:short)%(color:reset)] %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]'
	ls-br = branch -vva
	grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
	ls-graph = grog
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	ls-alias = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
	#ls-stat = 
	ls-new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

	diff-vim = difftool -t vimdiff -y

	# takes a name or emal address
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	# take a commit
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# backup current branch
	bk = !git branch --show-current | xargs -I {} git branch -f 'bk/{}'

	# shortcuts
	k = !gitk
	config-edit = config --global --edit
	co = checkout
	#addi = add --interactive
	br = branch
	ws = switch
	sw = switch
	ci = commit
	type = cat-file -t
	dump = cat-file -p
	publish = push --set-upstream origin
	untrack = rm --cached --

	# modify history, merges, push, pull
	amend = commit --amend --no-edit
	undo-commit = reset --soft HEAD~1
	unstage = restore --staged
	ff = merge --ff-only
	merc = merge --no-ff
	please = push --force-with-lease
	up = !git remote update --prune && git merge --ff-only @{u}
	# un fel de git-pull dar merge-ul este facut in ordinea corecta
	update-merge = !git fetch origin && git checkout -B temp-merge "@{u}" && git merge - && git switch - && git merge --ff-only temp-merge && git branch -D temp-merge

	# corectie pentru git-pull
	# -m 'mesaj' | git reset --hard <sha1>(care este luat prin |)
	reverse-parents = commit-tree -p HEAD^2 -p HEAD^1 "HEAD^{tree}"

	# stash
	save = !git add -A && git commit -m
	savem = save 'chore: commit save point'
	stsh = stash --keep-index          # stash only unstaged changes to tracked files
	#stash							   # stash any changes to tracked files
	staash = stash --include-untracked # stash untracked and tracked files
	staaash = stash --all              # stash ignored, untracked, and tracked files 


	# visual stuff
	#dv = difftool -t vimdiff -y
	#visual = !gitk

	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	ls-hidden = !git ls-files -v | grep '^h'
	# reset --soft:  uncommit changes, changes are left staged (index).
	# reset --mixed: uncommit + unstage changes, changes are left in working tree.
	# reset --hard:  uncommit + unstage + delete changes, nothing left.

	# expunge files from history
	# git filter-branch --index-filter 'git rm -q --cached --ignore-unmatch *.pdf' -- --all

[pull]
	rebase = true
[fetch]
	prune = true
[push]
	default = upstream
#[help]
	#autocorrect = 20
[rebase]
	autosquash = true
[merge]
	tool = vsdiffmerge
[mergetool "meld.exe"]
    cmd = meld.exe "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    #cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[diff]
	tool = vsdiffmerge
[difftool]
	prompt = true
[difftool "meld.exe"]
	cmd = meld.exe "$LOCAL" "$REMOTE"
[difftool "vsdiffmerge"]
	#cmd = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\vsdiffmerge.exe\" \"$LOCAL\" \"$REMOTE\" //t
	keepBackup = false
[mergetool]
	prompt = true
[mergetool "vsdiffmerge"]
	#cmd = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\vsdiffmerge.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\" //m
	keepBackup = false
	trustExitCode = true

